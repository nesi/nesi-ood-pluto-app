<%
   user = OodSupport::User.new
   weka_nfs_server = Resolv.getaddress("weka-nfs")
   
   # Reset workspace if requested
   if reset_workspace == "1"
     workspace_path = File.join(user.home, '.pluto', 'workspaces')
     if Dir.exist?(workspace_path)
       begin
         Dir.glob(File.join(workspace_path, '*')).each { |f| FileUtils.rm_rf(f) }
         Rails.logger.info "Pluto.ji workspace reset for user: #{user.name}"
       rescue => e
         Rails.logger.error "Failed to reset Pluto.ji workspace for user #{user.name}: #{e.message}"
       end
     end
   end
   
   # Initialize nesi_gid to nil
   nesi_gid = nil

   # Fetch the GID for the account group only if the account is present
   if account.present?
     nesi_group = Etc.getgrnam(account)  # Fetching the group based on the account
     nesi_gid = nesi_group ? nesi_group.gid : nil  # Get the GID, or nil if not found
   end
   
   # Get ALL groups the user belongs to that match the project pattern
   # Same approach as used in form.yml
   all_user_groups = OodSupport::User.new.groups.sort_by(&:id).tap { |groups|
     groups.unshift(groups.delete(OodSupport::Process.group))
   }.map(&:name)
   
   # Collect GIDs for ALL user's projects (not just selected ones)
   additional_gids = []
   all_user_groups.each do |project|
     begin
       project_group = Etc.getgrnam(project)
       additional_gids << project_group.gid if project_group && project_group.gid != nesi_gid
     rescue ArgumentError
       # Handle case where group doesn't exist
       Rails.logger.warn "Group not found for project: #{project}"
     end
   end
   
   # Combine all supplemental groups
   all_supplemental_groups = [nesi_gid].compact + additional_gids
%>
---
<% if cluster == "my-k8s-cluster" -%>
script:
  accounting_id: "<%= account %>"
  wall_time: "<%= bc_num_hours.to_i * 3600 %>"
  native:
    container:
      name: "<%= account.present? ? "pluto-#{account}" : 'pluto' %>"
      image: "ghcr.io/nesi/nesi-docker-base:v0.9.0"
      command: ["/bin/bash","-l","<%= staged_root %>/job_script_content.sh"]
      working_dir: "<%= Etc.getpwnam(ENV['USER']).dir %>"
      restart_policy: 'OnFailure'
      <% if all_supplemental_groups.any? %>
      supplemental_groups:
        <% all_supplemental_groups.each do |gid| %>
        - <%= gid %>
        <% end %>
      <% end %>
      env:
        PERIOD_SECONDS: "10"
        OPTIONS: -k <%= user.name %>@KAHU-DEV.FLEXI.NZ
        NB_UID: "<%= user.uid %>"
        NB_USER: "<%= user.name %>"
        NB_GID: "<%= account.present? ? account : user.group.id %>"
        HOME: "<%= user.home %>"
        LOG_DIR: "<%= staged_root %>"
        SHELL: "/bin/bash"
        LMOD_CONFIG_DIR: "/opt/nesi/etc/lmod"
        MODULEPATH_ROOT: "/opt/nesi/lmod"
        MODULEPATH: "/opt/nesi/lmod/generic"
        BASH_ENV: "/usr/share/lmod/lmod/init/bash"
        TZ: 'Pacific/Auckland'
        PLUTO_JOB_ACCOUNT: "<%= account %>"
        PRIMARY_PROJECT: "<%= account %>"
        <% if additional_projects.present? %>
        ADDITIONAL_PROJECTS: "<%= Array(additional_projects).join(':') %>"
        <% end %>
      port: "8080"
      cpu: "<%= num_cores %>"
      memory: "<%= num_mem %>Gi"
      startup_probe:
        initial_delay_seconds: 10
        failure_threshold: 12
        period_seconds: 5
    mounts:
      - type: nfs
        name: home
        host: <%= weka_nfs_server %>
        path: /home
        destination_path: /home
      - type: nfs
        name: project
        host: <%= weka_nfs_server %>
        path: /project
        destination_path: /nesi/project
      - type: nfs
        name: nobackup
        host: <%= weka_nfs_server %>
        path: /scratch
        destination_path: /nesi/nobackup
      - type: nfs
        name: software
        host: <%= weka_nfs_server %>
        path: /software
        destination_path: /opt/nesi
      - type: host
        name: nss-socket
        host_type: Socket
        path: /var/lib/sss/pipes/nss
        destination_path: /var/lib/sss/pipes/nss
      - type: host
        name: nsswitch-conf
        host_type: File
        path: /etc/nsswitch.conf
        destination_path: /etc/nsswitch.conf
<%- else -%>
script:
  accounting_id: "<%= account %>"
  wall_time: "<%= bc_num_hours.to_i * 3600 %>"
  native:
    - "--ntasks"
    - "1"
    - "--cpus-per-task"
    - "<%= num_cores %>"
    - "--mem"
    - "<%= num_mem %>G"
<%- if gpu != "none" -%>
    - "--gpus-per-node"
    - "<%= gpu %>"
<%- end -%>
<%- end -%>